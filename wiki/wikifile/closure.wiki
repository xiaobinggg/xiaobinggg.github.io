*闭包* 说白了就是函数的嵌套，内层函数可以使用外层函数的所有变量,即使外层函数已经执行完.
闭包允许内层函数引用父函数中的变量，但是该变量是 *最终值*

{{{js

 <ul>
	 <li>one</li>
	 <li>two</li>
	 <li>three</li>
	 <li>one</li>
 </ul>
 var lists = document.getElementsByTagName('li');
 for(var i = 0 , len = lists.length ; i < len ; i++){
      lists[ i ].onmouseover = function(){
            alert(i);    
      };
 }
 }}}
你会发现当鼠标移过每一个<li>元素时，总是弹出4，而不是我们期待的元素下标。这是为什么呢？注意事项里已经讲了（最终值）。显然这种解释过于简单，当mouseover事件调用监听函数时，首先在匿名函数( function(){ alert(i); })内部查找是否定义了 i，结果是没有定义；因此它会向上查找，查找结果是已经定义了，并且i的值是4（循环后的i值）；所以，最终每次弹出的都是4。
*  解决方法一：
{{{js
	var lists = document.getElementsByTagName('li');
	for(var i = 0 , len = lists.length ; i < len ; i++){
		(function(index){
		 lists[ index ].onmouseover = function(){
			 alert(index);    
		 }; 
		 })(i);              
	}
 }}}
* 解决方法二：
{{{js

	var lists = document.getElementsByTagName('li');
	for(var i = 0, len = lists.length; i < len; i++){
		lists[ i ].$$index = i;    //通过在Dom元素上绑定$$index属性记录下标
		lists[ i ].onmouseover = function(){
			alert(this.$$index);    
		};
	}
}}}
* 解决方法三：
{{{js
	function eventListener(list, index){
		list.onmouseover = function(){
			alert(index);
		};
	}
	var lists = document.getElementsByTagName('li');
	for(var i = 0 , len = lists.length ; i < len ; i++){
		eventListener(lists[i] , i);
	}
  }}}
  
 [[index]] -- [[javascript]] 
